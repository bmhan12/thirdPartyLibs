name: Docker Build TPLs

on:
  pull_request:
    branches: [ "master" ]

jobs:

  build_images:
    name: ${{ matrix.name }}

    #TODO: Change DOCKER_REPOSITORY root back to "geosx"
    strategy:
      matrix:
        include:
          #- name: Pangea 2 (centos 7.6, gcc 8.3.0, open-mpi 2.1.5, mkl 2019.3)
          #  DOCKER_REPOSITORY: han12/pangea2-gcc8.3.0-openmpi2.1.5-mkl2019.3
          #  DOCKERFILE: docker/TotalEnergies/Dockerfile
          #  DOCKER_ROOT_IMAGE: totogaz/pangea2-gcc8.3.0-openmpi2.1.5-mkl2019.3-no-geosx:0.0.1
          #  INSTALL_DIR: /workrd/SCR/GEOSX/install/gcc8/GEOSX_TPL-${{ github.event.number }}-${{github.run_number}}-${{ github.sha }}
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest
          #- name: Pecan GPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5, cuda 10.2.89p2)
          #  DOCKER_REPOSITORY: han12/pecan-gpu-gcc8.2.0-openmpi4.0.1-mkl2019.5-cuda10.2.89p2
          #  DOCKERFILE: docker/TotalEnergies/Dockerfile
          #  DOCKER_ROOT_IMAGE: totogaz/pecan-gcc8.2.0-openmpi4.0.1-mkl2019.5-cuda10.2.89p2-no-geosx:0.0.1
          #  HOST_CONFIG: docker/TotalEnergies/pecan-GPU.cmake
          #  INSTALL_DIR: /data/gpfs/Users/j0436735/travis-deployments/GPU/GEOSX_TPL-${{ github.event.number }}-${{github.run_number}}-${{ github.sha }}
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest
          #- name: Pecan CPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5)
          #  DOCKER_REPOSITORY: han12/pecan-cpu-gcc8.2.0-openmpi4.0.1-mkl2019.5
          #  DOCKERFILE: docker/TotalEnergies/Dockerfile
          #  DOCKER_ROOT_IMAGE: totogaz/pecan-gcc8.2.0-openmpi4.0.1-mkl2019.5-cuda10.2.89p2-no-geosx:0.0.1
          #  HOST_CONFIG: docker/TotalEnergies/pecan-CPU.cmake
          #  INSTALL_DIR: /data/gpfs/Users/j0436735/travis-deployments/CPU/GEOSX_TPL-${{ github.event.number }}-${{github.run_number}}-${{ github.sha }}
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest
          #- name: Mac OSX
          #  OS_TYPE: OSX
          #  runs-on: macos-12
          - name: Centos (7.6, clang 9.0.0 + gcc 4.9.3, open-mpi 1.10.7)
            DOCKER_REPOSITORY: han12/centos7.7.1908-clang9.0.0
            DOCKERFILE: docker/clang-centos/Dockerfile
            OS_TYPE: Linux
            runs-on: ubuntu-latest
          - name: Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)
            GCC_MAJOR_VERSION: 9
            DOCKER_REPOSITORY: han12/ubuntu20.04-gcc${GCC_MAJOR_VERSION}
            DOCKERFILE: docker/gcc-ubuntu/Dockerfile
            DOCKER_COMPILER_BUILD_ARG: "--build-arg GCC_MAJOR_VERSION=${GCC_MAJOR_VERSION}"
            OS_TYPE: Linux
            runs-on: ubuntu-latest
          #- name: Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3)
          #  GCC_MAJOR_VERSION: 10
          #  DOCKER_REPOSITORY: han12/ubuntu20.04-gcc${GCC_MAJOR_VERSION}
          #  DOCKERFILE: docker/gcc-ubuntu/Dockerfile
          #  DOCKER_COMPILER_BUILD_ARG: "--build-arg GCC_MAJOR_VERSION=${GCC_MAJOR_VERSION}"
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest
          #- name: Ubuntu (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)
          #  DOCKER_REPOSITORY: han12/ubuntu18.04-clang8.0.0-cuda10.1.243
          #  DOCKERFILE: docker/clang-cuda/Dockerfile
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest
          #- name: Centos (7.6, gcc 8.3.1, open-mpi 1.10.7, cuda 10.1.243)
          #  DOCKER_REPOSITORY: han12/centos7.6.1810-gcc8.3.1-cuda10.1.243
          #  DOCKERFILE: docker/gcc-cuda/Dockerfile
          #  OS_TYPE: Linux
          #  runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Print environment
      run: printenv

    - name: Run the docker build and push docker script
      run: ./scripts/docker_build_and_push.sh

  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'